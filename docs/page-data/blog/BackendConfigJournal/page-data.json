{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/blog/BackendConfigJournal/",
    "result": {"data":{"site":{"siteMetadata":{"title":"山东大学镜像站"}},"markdownRemark":{"id":"9266905e-fb8f-5f2a-8fc9-30cbfc90ffde","excerpt":"LXC 容器方案 为什么选择 LXC？ 无论是搭建镜像站，还是其他服务，首要的任务是实现功能，其次是保证稳定，有余力则追求美观。 因此，在单一 Linux 发行版上部署所有服务是十分不明智的做法。例如，激进的发行版提供更多、更新的软件包，而保守的发行版则具有更好的稳定性。此外，在保守发行版上编译安装新程序的做法则显得十分愚蠢——应尽可能选择通过发行版的官方仓库来部署服务，否则稳定性就是无稽之谈。容器级虚拟化就是用来调和两者矛盾的方案。 为此，我们选择了基于 LXC 的容器方案。LXC 在 200…","html":"<h2 id=\"lxc-容器方案\" style=\"position:relative;\"><a href=\"#lxc-%E5%AE%B9%E5%99%A8%E6%96%B9%E6%A1%88\" aria-label=\"lxc 容器方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LXC 容器方案</h2>\n<h3 id=\"为什么选择-lxc\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9-lxc\" aria-label=\"为什么选择 lxc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为什么选择 LXC？</h3>\n<p>无论是搭建镜像站，还是其他服务，首要的任务是实现功能，其次是保证稳定，有余力则追求美观。</p>\n<p>因此，在单一 Linux 发行版上部署所有服务是十分不明智的做法。例如，激进的发行版提供更多、更新的软件包，而保守的发行版则具有更好的稳定性。此外，在保守发行版上编译安装新程序的做法则显得十分愚蠢——应尽可能选择通过发行版的官方仓库来部署服务，否则稳定性就是无稽之谈。容器级虚拟化就是用来调和两者矛盾的方案。</p>\n<p>为此，我们选择了基于 LXC 的容器方案。LXC 在 2008 年诞生，目的是在共享主机内核的基础上，提供虚拟容器，每个容器运行一个完整的操作系统。与 Docker 相比，一个容器不必仅运行单一服务，因此可根据功能划分容器，便于管理；LXC 主机非常“干净”，除了提供 LXC 管理工具及网络外，无需参与任何具体的任务逻辑，因此具有更强的健壮性——尤其是这台服务器没有 IPMI、没有控制台，唯一的控制方式就是 SSH 时，主机的稳定性就更显得重要了。</p>\n<h3 id=\"lxc-主机应该选用什么发行版\" style=\"position:relative;\"><a href=\"#lxc-%E4%B8%BB%E6%9C%BA%E5%BA%94%E8%AF%A5%E9%80%89%E7%94%A8%E4%BB%80%E4%B9%88%E5%8F%91%E8%A1%8C%E7%89%88\" aria-label=\"lxc 主机应该选用什么发行版 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LXC 主机应该选用什么发行版？</h3>\n<p>对于 LXC 主机而言，稳定是第一要素。RHEL/CentOS 7 虽然在稳定性方面广受赞誉，但 Linux 3.10 内核与 LXC 1.0 工具集则显得力不从心。理论上，你可以用低版本内核运行原本为高版本内核准备的发行版容器，但实际应用中会导致诸多的小问题，如容器无法开机、DNS 解析发生阻塞等。在经过初步尝试后，RHEL/CentOS 7 确实无法胜任 LXC 主机的角色，被首先排除。CentOS 8 的发布遥遥无期，不做考虑。</p>\n<p>由于 LXC 主机要做的事情很简单，Arch Linux 或许可以保证稳定运行。但过于激进的发行版应放在最后考虑。</p>\n<p>作为老牌 Linux 发行版，Debian 拥有不输 RHEL/CentOS 的稳定性，同时内核较新，是容器级虚拟化的理想选择。截至本文编写时（2019 年 5 月），稳定版对应了搭载 4.9 内核的 Debian 9，而搭载了 4.19 内核的 Debian 10 刚刚进入 RC 阶段，软件包版本已基本冻结。不要因为“非正式版”就将 Debian 10 排除在外，这条可能对于其他发行版适用，但 Debian 即使是 unstable 版本也有不输 Ubuntu 的稳定性。</p>\n<p>由于 4.9 内核搭配高于 4.9 内核的发行版容器时仍会出现 DNS 解析阻塞问题，因此即使 Debian 10 正式发布还需要数月，我们仍然选择了 Debian 10。</p>\n<h3 id=\"lxc-容器应该选用什么发行版\" style=\"position:relative;\"><a href=\"#lxc-%E5%AE%B9%E5%99%A8%E5%BA%94%E8%AF%A5%E9%80%89%E7%94%A8%E4%BB%80%E4%B9%88%E5%8F%91%E8%A1%8C%E7%89%88\" aria-label=\"lxc 容器应该选用什么发行版 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LXC 容器应该选用什么发行版？</h3>\n<p>容器的发行版主要根据要实现的功能决定。例如，对于 HTTP 服务器，考虑到 TLS 1.3，我们选择了 Debian 10。同步程序以 Python 脚本、rsync 等为主，选择范围较广，我们选择了 Debian 10。对于前端代码，我们选择了 Arch Linux，以便使用最新版的 nodejs 和 yarn 等工具。重复一遍，官方源的软件是最稳定的，其次是可靠的第三方源，而编译安装则是最愚蠢的行为——但 Docker 用户请忽略这句话。</p>\n<h3 id=\"lxc-主机的主要配置过程\" style=\"position:relative;\"><a href=\"#lxc-%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%BB%E8%A6%81%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B\" aria-label=\"lxc 主机的主要配置过程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LXC 主机的主要配置过程</h3>\n<h4 id=\"安装-debian-10\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-debian-10\" aria-label=\"安装 debian 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 Debian 10</h4>\n<h5 id=\"获取镜像\" style=\"position:relative;\"><a href=\"#%E8%8E%B7%E5%8F%96%E9%95%9C%E5%83%8F\" aria-label=\"获取镜像 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>获取镜像</h5>\n<p>截至本文编写时（2019 年 5 月），Debian 10 尚未正式发行，因此 Debian 9 的镜像更易获取。虽然每周构建版本的 Debian 10 依然可用，但受限于下载速度，我们选择了先安装 Debian 9 再升级到 Debian 10 的做法。</p>\n<p>注：不知出于何种原因，我们的虚拟机提供方仅愿意预装 CentOS 7——巧妇难为无米之炊。在仅有 SSH 的前提下，我们选择了对最开头 1GiB 的 boot 分区解除挂载，然后将预先制作好的磁盘镜像 dd 到硬盘开头的做法来更换操作系统。但出于方便读者的考虑，在下文的叙述中，仍假设可以直接从光盘安装 Debian。</p>\n<p>将 Debian 的光盘插入服务器，进入安装界面。</p>\n<h5 id=\"硬盘分区\" style=\"position:relative;\"><a href=\"#%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA\" aria-label=\"硬盘分区 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>硬盘分区</h5>\n<p>对系统磁盘分区时，根据服务器是否支持 UEFI 启动，选择 GUID 分区表（GPT）或 MBR 分区表。</p>\n<p>对于 GUID 分区表（GPT），首先创建一个 500 MB 左右的 EFI 系统分区（ESP），格式化为 FAT32（唯一被 UEFI 标准支持的文件系统），挂载到 <code class=\"language-text\">/boot/efi</code>。然后将剩余的空间全部分配给一个主分区，挂载到 <code class=\"language-text\">/</code>。</p>\n<p>对于 MBR 分区表，则可选择将全部的空间分配给一个主分区（设为活动分区），挂载到 <code class=\"language-text\">/</code>。也可选择创建一个 500 MB 左右的主分区（设为活动分区），不格式化，然后将剩余的空间全部分配给一个主分区，挂载到 <code class=\"language-text\">/</code>（不是活动分区）。MBR 分区表的 <code class=\"language-text\">扩展分区</code> <code class=\"language-text\">逻辑分区</code>的设计是极其糟糕的，因此只需要使用主分区即可。</p>\n<p>注意，均不分配 SWAP 分区。SWAP 分区的优势是保证交换空间在存储设备上的连续性，以便加速访问。然而，对于固态硬盘而言，位置连续没有意义。即便是对于机械硬盘，由于 SWAP 文件一般是在分区基本为空的情况下创建的，只要不改变 SWAP 文件的大小——SWAP 分区本来就做不到这一点——也不会产生碎片。Ubuntu 从 18.04 桌面版开始，默认使用 SWAP 文件代替了 SWAP 分区。因此，在大多数场景下，应使用 SWAP 文件而不是 SWAP 分区。</p>\n<p>对于数据磁盘，一律使用 GUID 分区表。牢记，好习惯是，在一台机器上最多只有一个磁盘是 MBR 分区表，即在服务器不支持 UEFI 启动时系统盘可选择 MBR。除了系统盘外的其他磁盘一律不要使用 MBR 分区表，否则无论是对引导还是分区管理都没有好处。</p>\n<h5 id=\"组件选择\" style=\"position:relative;\"><a href=\"#%E7%BB%84%E4%BB%B6%E9%80%89%E6%8B%A9\" aria-label=\"组件选择 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组件选择</h5>\n<p>不要选择桌面环境。LXC 主机的软件包应尽可能地少，软件包越少，系统越稳定，此外也有利于减少攻击面。记得选择 SSH Server，或者也可以等到后期再安装。</p>\n<h5 id=\"安装-grub-引导器\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-grub-%E5%BC%95%E5%AF%BC%E5%99%A8\" aria-label=\"安装 grub 引导器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 grub 引导器</h5>\n<p>Debian 安装程序会提示你该将 grub 安装至何处。对于 MBR 分区表，应将 Grub 安装在系统磁盘的活动分区上。（一个 MBR 磁盘上只能有一个或零个活动分区，且活动分区一定是主分区。）对于 GUID 分区表，将其安装在 <code class=\"language-text\">EFI 系统分区</code>（ESP）即可。</p>\n<h5 id=\"升级到-debian-10\" style=\"position:relative;\"><a href=\"#%E5%8D%87%E7%BA%A7%E5%88%B0-debian-10\" aria-label=\"升级到 debian 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>升级到 Debian 10</h5>\n<p>Debian 的大版本升级很简单，只要将 <code class=\"language-text\">/etc/apt/sources.list</code> 中的发行版代号由 Debian 9 的 <code class=\"language-text\">stretch</code> 替换为 Debian 10 的 <code class=\"language-text\">buster</code>，然后执行 <code class=\"language-text\">apt update &amp;&amp; apt dist-upgrade</code> 即可。中途要注意文件替换的问题，不要无脑 yes，以免配置文件被新版缺省配置文件覆盖。</p>\n<h5 id=\"安装基本软件\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85%E5%9F%BA%E6%9C%AC%E8%BD%AF%E4%BB%B6\" aria-label=\"安装基本软件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装基本软件</h5>\n<p>安装以下基本软件。不再单独强调。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">screen</span> tmux <span class=\"token function\">wget</span> <span class=\"token function\">nano</span> <span class=\"token function\">curl</span> <span class=\"token function\">sudo</span></code></pre></div>\n<h4 id=\"网络配置\" style=\"position:relative;\"><a href=\"#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE\" aria-label=\"网络配置 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>网络配置</h4>\n<h5 id=\"更换网络管理器为-systemd-networkd\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%8D%A2%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%BA-systemd-networkd\" aria-label=\"更换网络管理器为 systemd networkd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更换网络管理器为 systemd-networkd</h5>\n<p>systemd-networkd 是主要适用于有线网络的网络管理器，与 NetworkManager 相比更简单，与传统的网络配置脚本相比更现代化。我们推荐在服务器上使用 systemd-networkd，以便为 LXC 容器提供更简单的网络设置。</p>\n<h6 id=\"创建配置文件\" style=\"position:relative;\"><a href=\"#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" aria-label=\"创建配置文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建配置文件</h6>\n<p><code class=\"language-text\">/etc/systemd/network</code> 是 systemd-networkd 的配置文件所在目录。创建一个 <code class=\"language-text\">10-wired.network</code> 文件，内容为：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Match</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">eth0</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Network</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">DHCP</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">no</span>\n<span class=\"token key attr-name\">Address</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10.102.7.58/23</span>\n<span class=\"token key attr-name\">Gateway</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10.102.7.254</span>\n<span class=\"token key attr-name\">DNS</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">114.114.114.114</span></code></pre></div>\n<p>一目了然，无需多言。</p>\n<h6 id=\"禁用-debian-默认的网络管理器\" style=\"position:relative;\"><a href=\"#%E7%A6%81%E7%94%A8-debian-%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%99%A8\" aria-label=\"禁用 debian 默认的网络管理器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>禁用 Debian 默认的网络管理器</h6>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> /etc/network/interfaces /etc/network/interfaces.bak\nsystemctl stop networking <span class=\"token comment\"># 注意，如果你没有做完上一行就执行了这一行，而且服务器只能通过远程操作，那么你完蛋了</span>\nsystemctl disable networking</code></pre></div>\n<p>根据安装时选择的软件包不同，NetworkManager 可能也被安装。卸载之。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> remove network-manager</code></pre></div>\n<h6 id=\"启动-systemd-networkd\" style=\"position:relative;\"><a href=\"#%E5%90%AF%E5%8A%A8-systemd-networkd\" aria-label=\"启动 systemd networkd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>启动 systemd-networkd</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">systemctl start systemd-networkd\nsystemctl <span class=\"token builtin class-name\">enable</span> systemd-networkd</code></pre></div>\n<h6 id=\"重启系统以验证设置\" style=\"position:relative;\"><a href=\"#%E9%87%8D%E5%90%AF%E7%B3%BB%E7%BB%9F%E4%BB%A5%E9%AA%8C%E8%AF%81%E8%AE%BE%E7%BD%AE\" aria-label=\"重启系统以验证设置 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重启系统以验证设置</h6>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl <span class=\"token function\">reboot</span></code></pre></div>\n<p>注意，如果配置不正确，SSH 将无法连接。请确保有备用手段可以连接主机。</p>\n<p>在极端情况下，可考虑手动为其分配 IP 地址使其重新联网。假设网络接口名称为 <code class=\"language-text\">eth0</code>，以下命令会相当有用。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ip</span> a <span class=\"token comment\"># 查看 IP 地址</span>\n<span class=\"token function\">ip</span> r <span class=\"token comment\"># 查看路由表</span>\n<span class=\"token function\">ip</span> n <span class=\"token comment\"># 查看 ARP/NDP</span>\n<span class=\"token function\">ip</span> a <span class=\"token function\">add</span> <span class=\"token number\">192.168</span>.0.2/24 dev eth0 <span class=\"token comment\"># 为 eth0 分配指定的静态 IP</span>\n<span class=\"token function\">ip</span> r <span class=\"token function\">add</span> default via <span class=\"token number\">192.168</span>.0.1 <span class=\"token comment\"># 指定默认路由</span>\n<span class=\"token function\">rm</span> /etc/resolv.conf <span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"nameserver 8.8.8.8\"</span> <span class=\"token operator\">></span> /etc/resolv.conf <span class=\"token comment\">#设置 DNS</span></code></pre></div>\n<h6 id=\"使用-systemd-resolved\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-systemd-resolved\" aria-label=\"使用 systemd resolved permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 systemd-resolved</h6>\n<p>使用与 systemd-networkd 配套的 systemd-resolved 以管理 DNS 地址。</p>\n<p>根据 Debian 版本不同，可能需要手动安装 systemd-resolved 软件包，也可能已经内置在系统中。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> systemd-resolved</code></pre></div>\n<p>删除 resolvconf 软件包。我们不使用它管理 DNS 地址。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> remove resolvconf</code></pre></div>\n<p>注意，为了避免与后面使用的 dnsmasq 冲突，需要禁用 systemd-networkd 的 DNS 缓存功能。此外，由于众所周知的原因，不能强制使用 DNSSEC。</p>\n<p>修改 <code class=\"language-text\">/etc/systemd/resolved.conf</code> 文件，设置以下选项：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Resolve</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Cache</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">no</span>\n<span class=\"token key attr-name\">DNSStubListener</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">no</span>\n<span class=\"token key attr-name\">DNSSEC</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">allow-downgrade</span></code></pre></div>\n<p>启动 systemd-resolved，并配置好 DNS。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> systemd-resolved\nsystemctl start systemd-resolved\n<span class=\"token function\">rm</span> /etc/resolv.conf\n<span class=\"token function\">ln</span> -s /run/systemd/resolve/resolv.conf /etc/resolv.conf</code></pre></div>\n<h6 id=\"为-lxc-提供网桥和-nat\" style=\"position:relative;\"><a href=\"#%E4%B8%BA-lxc-%E6%8F%90%E4%BE%9B%E7%BD%91%E6%A1%A5%E5%92%8C-nat\" aria-label=\"为 lxc 提供网桥和 nat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为 LXC 提供网桥和 NAT</h6>\n<p>创建 <code class=\"language-text\">20-lxc-bridge.netdev</code> 文件，内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">NetDev</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lxc-bridge</span>\n<span class=\"token key attr-name\">Kind</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">bridge</span></code></pre></div>\n<p>创建 <code class=\"language-text\">20-lxc-bridge.network</code>文件，内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Match</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lxc-bridge</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Network</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Address</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.0.1/24</span>\n<span class=\"token key attr-name\">IPForward</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">ipv4</span>\n<span class=\"token key attr-name\">IPMasquerade</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">yes</span>\n<span class=\"token key attr-name\">DHCPServer</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">yes</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">DHCPServer</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">EmitDNS</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">yes</span>\n<span class=\"token key attr-name\">DNS</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.0.1</span>\n<span class=\"token key attr-name\">PoolOffset</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span>\n<span class=\"token key attr-name\">PoolSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></code></pre></div>\n<p>创建<code class=\"language-text\">20-lxc-dummy.netdev</code>文件，内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">NetDev</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lxc-dummy</span>\n<span class=\"token key attr-name\">Kind</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">dummy</span></code></pre></div>\n<p>创建<code class=\"language-text\">20-lxc-dummy.network</code>文件，内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Match</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lxc-dummy</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Network</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Bridge</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lxc-bridge</span></code></pre></div>\n<p>如此，名为 <code class=\"language-text\">lxc-bridge</code> 的网桥如同路由器的 LAN 口，接入的设备可自动获取 IP 并上网。</p>\n<p>注意，这里我们将 <code class=\"language-text\">192.168.0.1</code> 作为了 DNS 服务器，但此时还没有架设它。一会儿将解决这个问题。</p>\n<p>由于 LXC 容器要提供服务，端口转发是必备的，因此防火墙是必不可少的。</p>\n<h5 id=\"安装-firewalld-防火墙\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-firewalld-%E9%98%B2%E7%81%AB%E5%A2%99\" aria-label=\"安装 firewalld 防火墙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 firewalld 防火墙</h5>\n<p>Debian 10 已将 iptables 更换为 nftables。但我们并不手动配置这些 *tables，而是使用 firewalld 作为防火墙。firewalld 可以认为是 *tables 的前端。</p>\n<p>注意，一旦安装了 firewalld，之前在 systemd-networkd 中设置的 NAT 转发会作废，而 DHCP 服务也会被阻断。一会儿将解决这些问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> firewalld\nsystemctl <span class=\"token builtin class-name\">enable</span> firewalld\nsystemctl start firewalld</code></pre></div>\n<p>缺省情况下，SSH 服务已被放行。</p>\n<h6 id=\"将后端切换为-nftables\" style=\"position:relative;\"><a href=\"#%E5%B0%86%E5%90%8E%E7%AB%AF%E5%88%87%E6%8D%A2%E4%B8%BA-nftables\" aria-label=\"将后端切换为 nftables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>将后端切换为 nftables</h6>\n<p>依据发行版不同，firewalld 可能使用 iptables 或 nftables 做后端。推荐使用 nftables 做后端。</p>\n<p>nftables 可能没有被安装。首先安装。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> nftables</code></pre></div>\n<p>打开 <code class=\"language-text\">/etc/firewalld/firewalld.conf</code> 文件，找到并设置以下选项。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># FirewallBackend</span>\n<span class=\"token comment\"># Selects the firewall backend implementation.</span>\n<span class=\"token comment\"># Choices are:</span>\n<span class=\"token comment\">#\t- nftables (default)</span>\n<span class=\"token comment\">#\t- iptables (iptables, ip6tables, ebtables and ipset)</span>\n<span class=\"token key attr-name\">FirewallBackend</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">nftables</span></code></pre></div>\n<p>如果之前设置为了 iptables，将其改为 nftables。修改后，可能需要重启主机才能完全生效。</p>\n<p>在 Debian 10 的软件包中，firewalld 依然依赖 iptables。不过，修改了配置文件并重启后，iptables 不做任何用途使用。<code class=\"language-text\">iptables -L</code> 的输出结果应该是空。不需要管它。</p>\n<h6 id=\"配置外网\" style=\"position:relative;\"><a href=\"#%E9%85%8D%E7%BD%AE%E5%A4%96%E7%BD%91\" aria-label=\"配置外网 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置外网</h6>\n<p>将外网接口 <code class=\"language-text\">eth0</code> 接入 external 区域。此区域将作为 NAT 的出口，以及端口转发。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">firewall-cmd --zone<span class=\"token operator\">=</span>external --add-interface<span class=\"token operator\">=</span>eth0 --permanent\nfirewall-cmd --zone<span class=\"token operator\">=</span>external --add-service<span class=\"token operator\">=</span>ssh --permanent <span class=\"token comment\"># 这条应该默认存在，不过再写一次</span>\n\nfirewall-cmd --zone<span class=\"token operator\">=</span>external --add-masquerade --permanent\nfirewall-cmd --zone<span class=\"token operator\">=</span>external --add-forward-port<span class=\"token operator\">=</span>port<span class=\"token operator\">=</span><span class=\"token number\">9002</span>:proto<span class=\"token operator\">=</span>tcp:toport<span class=\"token operator\">=</span><span class=\"token number\">22</span>:toaddr<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.0.2 --permanent\nfirewall-cmd --zone<span class=\"token operator\">=</span>external --add-forward-port<span class=\"token operator\">=</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span>:proto<span class=\"token operator\">=</span>tcp:toport<span class=\"token operator\">=</span><span class=\"token number\">80</span>:toaddr<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.0.2 --permanent\nfirewall-cmd --zone<span class=\"token operator\">=</span>external --add-forward-port<span class=\"token operator\">=</span>port<span class=\"token operator\">=</span><span class=\"token number\">443</span>:proto<span class=\"token operator\">=</span>tcp:toport<span class=\"token operator\">=</span><span class=\"token number\">443</span>:toaddr<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.0.2 --permanent\n\nfirewall-cmd --reload</code></pre></div>\n<p>注意，因为 firewalld 服务已经开启，如果这里没有设置 <code class=\"language-text\">--add-masquerade</code>，systemd-networkd 中设置的 <code class=\"language-text\">IPMasquerade=yes</code> 无效。另外，不要搞混在哪里设置 masquerade。对于 firewalld，在 NAT 的出口设置 masquerade；对于 systemd-networkd，在 NAT 的入口设置 masquerade。</p>\n<h6 id=\"配置内网\" style=\"position:relative;\"><a href=\"#%E9%85%8D%E7%BD%AE%E5%86%85%E7%BD%91\" aria-label=\"配置内网 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置内网</h6>\n<p>将内网 <code class=\"language-text\">lxc-bridge</code> 接入 internal 区域。此区域将被配置为类似于路由器的 LAN。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">firewall-cmd --zone<span class=\"token operator\">=</span>internal --add-interface<span class=\"token operator\">=</span>lxc-bridge --permanent\nfirewall-cmd --zone<span class=\"token operator\">=</span>internal --add-service<span class=\"token operator\">=</span>dhcp --permanent\nfirewall-cmd --zone<span class=\"token operator\">=</span>internal --add-service<span class=\"token operator\">=</span>dns --permanent\n\nfirewall-cmd --reload</code></pre></div>\n<h6 id=\"重要提示\" style=\"position:relative;\"><a href=\"#%E9%87%8D%E8%A6%81%E6%8F%90%E7%A4%BA\" aria-label=\"重要提示 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重要提示</h6>\n<p>必须为 <code class=\"language-text\">lxc-bridge</code> 分配到一个不同于 external 区域之外的区域，而绝不可以接入到 external 区域（因为我们在 external 区域上设置了 masquerade）。</p>\n<p>如果主机上还有其他网卡，请根据网卡的角色手动为其指定一个区域。默认情况下，未指定区域的网卡将被接入 public 区域。作为外网使用的网卡应接入之前配置好的 external 区域。</p>\n<h5 id=\"安装-dns-服务器\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-dns-%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-label=\"安装 dns 服务器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 DNS 服务器</h5>\n<p>这里的 DNS 服务器是为了缓存 DNS 解析结果，因此使用 dnsmasq。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> dnsmasq</code></pre></div>\n<p>编辑 <code class=\"language-text\">/etc/dnsmasq.conf</code> 文件，内容改为：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\">no-resolv\n<span class=\"token key attr-name\">server</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">114.114.114.114</span>\n<span class=\"token key attr-name\">interface</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lxc-bridge</span></code></pre></div>\n<p>如果希望使用 <code class=\"language-text\">/etc/resolv.conf</code> 的 DNS 服务器设置，则文件内容只需要这一行：</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">interface</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lxc-bridge</span></code></pre></div>\n<p>启动 dnsmasq 服务。注意，如果启动失败，使用 <code class=\"language-text\">ss -unlp</code> 命令检查是否有其他程序占用了 UDP 53 端口。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> dnsmasq\nsystemctl start dnsmasq</code></pre></div>\n<h4 id=\"使用-lxc-30\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-lxc-30\" aria-label=\"使用 lxc 30 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 LXC 3.0</h4>\n<p>Debian 9 搭配的是 LXC 2.0，而 Debian 10 搭配的是 LXC 3.0。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> lxc</code></pre></div>\n<h5 id=\"创建一个名为-name-的容器\" style=\"position:relative;\"><a href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA-name-%E7%9A%84%E5%AE%B9%E5%99%A8\" aria-label=\"创建一个名为 name 的容器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建一个名为 NAME 的容器</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lxc-create -n NAME -t download -- --server mirrors.tuna.tsinghua.edu.cn/lxc-images --keyserver<span class=\"token operator\">=</span>hkp://keyserver.ubuntu.com:80</code></pre></div>\n<p>2019 年 5 月注：这里使用了清华大学开源软件镜像站作为 lxc-images 的上游仓库。但是截至目前，清华大学开源软件镜像站的 lxc-images 存在严重的索引提前于内容同步完成的情况，因此如果报错 404，请将 <code class=\"language-text\">--server mirrors.tuna.tsinghua.edu.cn/lxc-images</code> 部分删除，使用官方源。</p>\n<p>2019 年 12 月注：截至目前，清华大学开源软件镜像站的 lxc-images 依然存在严重的索引提前于内容同步完成的情况。山东大学镜像站已提供 lxc-images 的<a href=\"/docs/guide/lxc-images.html\">可靠镜像</a>。可改为以下命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lxc-create -n NAME -t download -- --server mirrors.sdu.edu.cn/lxc-images --no-validate</code></pre></div>\n<h5 id=\"启停容器进入容器\" style=\"position:relative;\"><a href=\"#%E5%90%AF%E5%81%9C%E5%AE%B9%E5%99%A8%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8\" aria-label=\"启停容器进入容器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>启停容器、进入容器</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lxc-start -n NAME\nlxc-attach -n NAME</code></pre></div>\n<p>注意，如果你使用的是 LXC 1.0，这里的命令有所不同，不再赘述。</p>\n<p>进入容器后，可以发现未分配网络。因此，按 Ctrl+D 退出容器，然后用以下命令建议容器退出。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lxc-stop -n NAME</code></pre></div>\n<h5 id=\"为容器分配网络共享文件夹自动启动\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E5%AE%B9%E5%99%A8%E5%88%86%E9%85%8D%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8\" aria-label=\"为容器分配网络共享文件夹自动启动 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为容器分配网络、共享文件夹、自动启动</h5>\n<p>编辑 <code class=\"language-text\">/var/lib/lxc/NAME/config</code> 文件，最后两行应该像这样。（早期版本的 LXC 与此略有不同。）</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># Network configuration</span>\n<span class=\"token key attr-name\">lxc.net.0.type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">empty</span></code></pre></div>\n<p>将其改为</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># Network configuration</span>\n<span class=\"token key attr-name\">lxc.net.0.type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">veth</span>\n<span class=\"token key attr-name\">lxc.net.0.link</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">lxc-bridge</span>\n<span class=\"token key attr-name\">lxc.net.0.flags</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">up</span>\n<span class=\"token key attr-name\">lxc.net.0.hwaddr</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">00:16:3e:xx:xx:xx</span>\n\n<span class=\"token comment\"># Autostart</span>\n<span class=\"token key attr-name\">lxc.start.auto</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">1</span>\n<span class=\"token key attr-name\">lxc.start.delay</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">0</span>\n<span class=\"token key attr-name\">lxc.start.order</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">0</span>\n\n<span class=\"token comment\"># Mount</span>\n<span class=\"token key attr-name\">lxc.mount.entry</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">/path/to/folder1 path/to/folder2 none bind 0 0</span></code></pre></div>\n<p>即可实现相应的配置。</p>\n<p>请注意挂载文件夹的写法。这将把主机的 <code class=\"language-text\">/path/to/folder1</code> 文件夹与容器内的 <code class=\"language-text\">/path/to/folder2</code> 文件夹联通。容器内该文件夹必须事先存在，否则会报错。换句话说，记得在主机事先创建好 <code class=\"language-text\">/var/lib/lxc/NAME/rootfs/path/to/folder2</code> 文件夹。</p>\n<h5 id=\"示例容器内开启-ssh\" style=\"position:relative;\"><a href=\"#%E7%A4%BA%E4%BE%8B%E5%AE%B9%E5%99%A8%E5%86%85%E5%BC%80%E5%90%AF-ssh\" aria-label=\"示例容器内开启 ssh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>示例：容器内开启 SSH</h5>\n<p>首先，尽管主机已经开启了 DHCP 服务，应当使用静态 IP 来配置容器，这样才能和之前在 firewalld 中配置好的端口转发规则一致。假设之前在主机内设置了 <code class=\"language-text\">firewall-cmd --zone=public --add-forward-port=port=9002:proto=tcp:toport=22:toaddr=192.168.0.2</code>，则将容器内的 IP 设置为 <code class=\"language-text\">192.168.0.2</code></p>\n<p>后，直接安装 SSH 服务器即可从主机的 9002 端口访问 SSH。同样，在容器内推荐使用 systemd-networkd 来配置网络。</p>\n<h4 id=\"lxc-主机的其他配置\" style=\"position:relative;\"><a href=\"#lxc-%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE\" aria-label=\"lxc 主机的其他配置 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LXC 主机的其他配置</h4>\n<p>以下配置与 LXC 方案无关，仅为推荐。</p>\n<h5 id=\"安装-molly-guard\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-molly-guard\" aria-label=\"安装 molly guard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 molly-guard</h5>\n<p>此软件包可避免人为疏忽而意外关闭或重启宿主服务器。使用 <code class=\"language-text\">lxc-attach</code> 在主机上操作容器时，以为在操作容器实际上却操作了主机是很常见的失误。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> molly-guard</code></pre></div>\n<p>可顺便将主机名更改为有意义的名称，如 <code class=\"language-text\">lxc-host</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hostnamectl set-hostname lxc-host</code></pre></div>\n<h5 id=\"安装-haveged\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-haveged\" aria-label=\"安装 haveged permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 haveged</h5>\n<p>虚拟机更容易出现熵不足的问题。比如，是否开机后 SSH 连接一直超时，然后从控制台登录后 SSH 连接又突然好了？这种情况很可能是熵不足。haveged 通过使用质量较低的伪随机数填充系统的熵池，达到加速 <code class=\"language-text\">/dev/random</code> 的目的，从而避免熵不足的问题。仅当安全不是首要考虑因素时，才应使用该软件，否则应将硬件随机数发生器直通到虚拟机内部。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> haveged\nsystemctl <span class=\"token builtin class-name\">enable</span> haveged\nsystemctl start haveged</code></pre></div>\n<p>注意，提供随机数是内核的事情，因此只能在主机上做这个事情。</p>\n<h5 id=\"创建-swap-文件\" style=\"position:relative;\"><a href=\"#%E5%88%9B%E5%BB%BA-swap-%E6%96%87%E4%BB%B6\" aria-label=\"创建 swap 文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建 SWAP 文件</h5>\n<ol>\n<li>假设 SWAP 文件的大小为 10 GiB。创建一个大小为 10GiB 的全零文件。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">dd if=/dev/zero of=/data/swapfile bs=1M count=10240</code></pre></div>\n<p>  *对于 XFS 或 F2FS 文件系统，请确保创建全零文件，而不是使用 fallocate 或者 dd 等创建稀疏文件。不然可能无法 mkswap 和 swapon。见 <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1129205#c3\">Bug 1129205 - fallocate to create swap file creates a file with holes</a>。</p>\n<p>  <em>如非必要，不要随便使用 dd 等命令生成空的大文件。尽可能产生稀疏文件以节约时间和保护 SSD 寿命。本处为不得已而为之。</em></p>\n<ol start=\"2\">\n<li>确保该文件的所有者和组均为 root。</li>\n<li>将其权限置为 600。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">chmod 600 /data/swapfile</code></pre></div>\n<ol start=\"4\">\n<li>格式化并临时启用该交换文件。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">mkswap /data/swapfile &amp;&amp; swapon /data/swapfile</code></pre></div>\n<ol start=\"5\">\n<li>确保 SWAP 生效。检查以下命令返回的结果中的 Swap 一行的值是否增加了。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">free -h</code></pre></div>\n<ol start=\"6\">\n<li>修改 /etc/fstab。在最后增加一行</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">/data/swapfile none swap defaults 0 0</code></pre></div>\n<p>  <em>确保 /data 的挂载在该行之前出现。</em></p>\n<ol start=\"7\">\n<li>重启系统，再用 free 命令查看 SWAP 是否生效。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">systemctl reboot\nfree -h</code></pre></div>\n<h5 id=\"加速-ssh-登录\" style=\"position:relative;\"><a href=\"#%E5%8A%A0%E9%80%9F-ssh-%E7%99%BB%E5%BD%95\" aria-label=\"加速 ssh 登录 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加速 SSH 登录</h5>\n<p>默认配置的 SSH 服务会对客户端 IP 做一些检查，如 DNS 反向解析、GSS 认证，非常耗时。建议关闭。\n打开 <code class=\"language-text\">/etc/ssh/sshd_config</code> 文件，找到并设置以下选项。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">UseDNS no\nGSSAPIAuthentication no</code></pre></div>\n<p>重启 SSH 服务。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">systemctl restart sshd</code></pre></div>\n<h2 id=\"镜像同步方案\" style=\"position:relative;\"><a href=\"#%E9%95%9C%E5%83%8F%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88\" aria-label=\"镜像同步方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>镜像同步方案</h2>\n<h3 id=\"工具选择\" style=\"position:relative;\"><a href=\"#%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9\" aria-label=\"工具选择 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工具选择</h3>\n<p>镜像站同步的内容大致分为两类：一类是完全同步的仓库，如 Arch Linux 源；一类是需要选择性同步的仓库，如 Debian、Ubuntu 源等，受镜像站容量限制，只同步 amd64 指令集的二进制程序。</p>\n<p>对于前者，rsync 通常是最合适的选择。</p>\n<p>对于后者，我们选择并改进了 apt-mirror 工具，该工具提供了选择性同步功能，并实现了同步的原子性。</p>\n<h3 id=\"原子性\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%AD%90%E6%80%A7\" aria-label=\"原子性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原子性</h3>\n<p>仓库由索引文件和资源文件组成，这些文件需要保持一致。</p>\n<p>镜像站必须达到如下目标。</p>\n<table>\n<thead>\n<tr>\n<th>镜像站的状态</th>\n<th>版本1</th>\n<th>版本1升级到版本2</th>\n<th>版本2</th>\n<th>版本2升级到版本3</th>\n<th>版本3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用户访问的内容</td>\n<td>版本1</td>\n<td>版本1</td>\n<td>版本2</td>\n<td>版本2</td>\n<td>版本3</td>\n</tr>\n</tbody>\n</table>\n<p>即，进行同步时，镜像站需要保留新旧两个版本的内容，并在同步结束时，以非常快的速度完成版本切换。只有这样，才能保证用户使用时不会出错。想象一下，一本书，前一半页码是第1版第1次印刷的内容，后一半则变成了第1版第2次印刷的内容，这样的书显然是无法阅读的。</p>\n<p>apt-mirror 工具已经做好了原子性的工作。</p>\n<p>rsync 虽然也有 <code class=\"language-text\">--delay-updates</code> <code class=\"language-text\">--delete-after</code> 这样的选项，但从实际体验来看效果并不好，因此，我们姑且认为 rsync 不具备原子性，亲自完成保证原子性的工作。</p>\n<h3 id=\"保证原子性\" style=\"position:relative;\"><a href=\"#%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7\" aria-label=\"保证原子性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>保证原子性</h3>\n<h4 id=\"引子\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E5%AD%90\" aria-label=\"引子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引子</h4>\n<p>在这之前，我们来探究一个小问题。</p>\n<p>假设磁盘上存在一个文件 <code class=\"language-text\">/path/to/file</code>。</p>\n<p>不考虑文件权限等问题，只从文件内容的角度来说，以下两行 bash 命令是否等价？</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> /path/to/file</code></pre></div>\n<p>将空内容写入到该文件中。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rm /path/to/file &amp;&amp; touch /path/to/file</code></pre></div>\n<p>删除该文件，并重建一个空文件。</p>\n<p>看起来，<code class=\"language-text\">/path/to/file</code> 的内容均被清空，似乎是等价的。然而，并不是这样。运行并观察下面的两段代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"foo\"</span> <span class=\"token operator\">></span> /tmp/file1\n<span class=\"token function\">ln</span> -sf /tmp/file1 /tmp/file2\n<span class=\"token operator\">></span> /tmp/file2\n<span class=\"token function\">cat</span> /tmp/file1</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"foo\"</span> <span class=\"token operator\">></span> /tmp/file1\n<span class=\"token function\">ln</span> -sf /tmp/file1 /tmp/file2\n<span class=\"token function\">rm</span> /tmp/file2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">touch</span> /tmp/file2\n<span class=\"token function\">cat</span> /tmp/file1</code></pre></div>\n<p>第一段代码，随着<code class=\"language-text\">file2</code> 被清空，<code class=\"language-text\">file1</code>  也同时被清空了。</p>\n<p>第二段代码，<code class=\"language-text\">file1</code> 并没有被清空，因为在删除 <code class=\"language-text\">file2</code> 这个文件时，它与 <code class=\"language-text\">file1</code> 的关系被解除了。</p>\n<p>PS: 为什么有那么多人认为“Linux 的软链接如同 Windows 的快捷方式”？谬论重复一千遍，也不能变为真理，但是还真有一群傻瓜认为这句话正确，原因仅仅是因为大家都这么说。真正正确的说法是，“Linux 的软链接如同 Windows 的软链接；Linux 的 .desktop 文件如同 Windows 的快捷方式”。</p>\n<h4 id=\"冗余似乎是必要的代价\" style=\"position:relative;\"><a href=\"#%E5%86%97%E4%BD%99%E4%BC%BC%E4%B9%8E%E6%98%AF%E5%BF%85%E8%A6%81%E7%9A%84%E4%BB%A3%E4%BB%B7\" aria-label=\"冗余似乎是必要的代价 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>冗余，似乎是必要的代价？</h4>\n<p>原子性，可用以下流程表示。</p>\n<ul>\n<li>第一步：通过魔法，提供一个目录A的副本，记为目录B。</li>\n<li>第二步：用户或者程序改动目录B。</li>\n<li>第三步：通过魔法，用目录B代替目录A。</li>\n</ul>\n<p>通过以上的步骤，可以保证目录A始终保持一致性。如同显卡的双缓冲机制一样，下一个场景完全准备好了，才能替换上一个场景，以避免画面闪烁的情况，也就是不一致性。</p>\n<p>那么，如何实现步骤中的魔法呢？</p>\n<p><strong>方法一：复制</strong></p>\n<ul>\n<li>效率：低。浪费磁盘空间和复制的时间。</li>\n<li>是否保证了原子性：是。</li>\n<li>例子：git——用户可以对当前工作区的文件做任何修改，然后 commit 或者 revert。为了保证已经 commit 的数据不丢失，复制一份是必须的。</li>\n</ul>\n<p><strong>方法二：链接</strong></p>\n<ul>\n<li>方法：链接。硬链接、软链接都行。</li>\n<li>效率：高。没有浪费磁盘空间，不需要复制。</li>\n<li>是否保证了原子性：<strong>否</strong>。</li>\n<li>这是一个不可行的办法。原因很简单，对目录B内文件的操作可以反过来对目录A的文件造成影响。还记得刚才的引子吗？</li>\n</ul>\n<p>你还能想到其他的方法吗？</p>\n<p>很遗憾，如果没有其他魔法的支持，复制就是唯一的办法。</p>\n<h4 id=\"cow-aka-写时复制\" style=\"position:relative;\"><a href=\"#cow-aka-%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6\" aria-label=\"cow aka 写时复制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>COW (aka. 写时复制)</h4>\n<p>btrfs 和 ZFS 文件系统都支持 COW。COW 的意思是，将文件A复制到文件B时，暂时不执行复制动作，而是让两个文件共用一份存储空间。当文件A或B发生改动时，执行复制动作，将两个文件分开。</p>\n<p>COW 就是文件系统提供的“魔法”。很显然，COW 只能由文件系统提供支持。</p>\n<p>cp 命令提供了 COW 的支持，使用 <code class=\"language-text\">--reflink</code> 选项控制。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> --reflink<span class=\"token operator\">=</span>always /path/to/fileA /path/to/fileB</code></pre></div>\n<p>强制使用 COW 进行复制。失败则报错。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> --reflink<span class=\"token operator\">=</span>auto /path/to/fileA /path/to/fileB</code></pre></div>\n<p>首先尝试 COW 进行复制，失败则会 fallback 到普通复制。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> --reflink<span class=\"token operator\">=</span>never /path/to/fileA /path/to/fileB</code></pre></div>\n<p>强制使用普通复制。</p>\n<p>将 COW 与普通复制、链接相提并论并不合适，因为 COW 和普通复制的效果一样——产生了一个与母本毫无联系的副本。在用户的眼中，COW 和普通复制是等价的。当然，在系统管理员眼中，COW 节约了时间和空间。</p>\n<h4 id=\"依赖-cow-的原子性脚本\" style=\"position:relative;\"><a href=\"#%E4%BE%9D%E8%B5%96-cow-%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E8%84%9A%E6%9C%AC\" aria-label=\"依赖 cow 的原子性脚本 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>依赖 COW 的原子性脚本</h4>\n<p>有了 COW，我们可以有效率地保证原子性了。参考如下的脚本。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token comment\"># 要保证原子性的目录路径，实际上为软链接，在脚本执行前指向 ${DIR_CURRENT}</span>\n<span class=\"token assign-left variable\">DIR</span><span class=\"token operator\">=</span>/path/to/dir\n<span class=\"token comment\"># 当前版本的文件</span>\n<span class=\"token assign-left variable\">DIR_CURRENT</span><span class=\"token operator\">=</span>/path/to/dir-current\n<span class=\"token comment\"># 临时目录，用来存储下一版本的文件</span>\n<span class=\"token assign-left variable\">DIR_NEW</span><span class=\"token operator\">=</span>/path/to/dir-new\n\n<span class=\"token comment\"># 加锁，保证此脚本不会多次执行。此部分略去。</span>\n\n<span class=\"token comment\"># 将 ${DIR_CURRENT} 复制到 ${DIR_NEW}。强制使用 COW。</span>\n<span class=\"token function\">cp</span> --reflink<span class=\"token operator\">=</span>always <span class=\"token string\">\"<span class=\"token variable\">${DIR_CURRENT}</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${DIR_NEW}</span>\"</span>\n\n<span class=\"token comment\"># 执行用户程序，对 ${DIR_NEW} 做任何事情。</span>\n/path/to/some/dirty/work/here <span class=\"token string\">\"<span class=\"token variable\">${DIR_NEW}</span>\"</span>\n\n<span class=\"token comment\"># 将软链接指向 ${DIR_NEW}，即切换到新版本。</span>\n<span class=\"token function\">ln</span> -sf <span class=\"token string\">\"<span class=\"token variable\">${DIR_NEW}</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${DIR}</span>\"</span>\n\n<span class=\"token comment\"># 用 ${DIR_NEW} 取代 ${DIR_CURRENT}</span>\n<span class=\"token function\">rm</span> -rf <span class=\"token string\">\"<span class=\"token variable\">${DIR_CURRENT}</span>\"</span>\n<span class=\"token function\">cp</span> --reflink<span class=\"token operator\">=</span>always <span class=\"token string\">\"<span class=\"token variable\">${DIR_NEW}</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${DIR_CURRENT}</span>\"</span>\n\n<span class=\"token comment\"># 将软链接指向 ${DIR_CURRENT}</span>\n<span class=\"token function\">ln</span> -sf <span class=\"token string\">\"<span class=\"token variable\">${DIR_CURRENT}</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">${DIR}</span>\"</span>\n<span class=\"token function\">rm</span> -rf <span class=\"token string\">\"<span class=\"token variable\">${DIR_NEW}</span>\"</span>\n\n<span class=\"token comment\"># 完成</span></code></pre></div>\n<p>在如上的脚本中，DIR 目录始终保持了原子性。目的达到了。</p>\n<h3 id=\"systemd-的-service-和-timer\" style=\"position:relative;\"><a href=\"#systemd-%E7%9A%84-service-%E5%92%8C-timer\" aria-label=\"systemd 的 service 和 timer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>systemd 的 service 和 timer</h3>\n<p>镜像站需要定期执行同步任务。我们不使用老旧的 crontab，而是将同步任务作为 systemd 的服务，并配置合适的定时器来定期执行。举例如下。</p>\n<p><code class=\"language-text\">/etc/systemd/system/example-task.service</code> 文件如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Unit</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Description</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">Example Task</span>\n<span class=\"token key attr-name\">After</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">network.target</span>\n<span class=\"token key attr-name\">Wants</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">network.target</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Service</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">simple</span>\n<span class=\"token key attr-name\">ExecStart</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/path/to/example/task</span>\n<span class=\"token key attr-name\">Restart</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">no</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Install</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">WantedBy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">multi-user.target</span></code></pre></div>\n<p><code class=\"language-text\">/etc/systemd/system/example-task.timer</code>文件如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Unit</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">Description</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">Timer for Example Task</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Timer</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">OnCalendar</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">*-*-* 17:00:00 UTC</span>\n<span class=\"token key attr-name\">Unit</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">example-task.service</span>\n\n<span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">Install</span><span class=\"token punctuation\">]</span></span>\n<span class=\"token key attr-name\">WantedBy</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">timers.target</span></code></pre></div>\n<p>如图所示的定时器会在协调世界时 17 点时启动对应的服务。如果该服务执行的太慢，以至于 24 小时后依然没有结束，那么定时器不会重复启动该服务的第二个实例。</p>\n<p>PS: Linux 中的<code class=\"language-text\">格林尼治时间</code>指<strong>格林尼治这个地区的时区</strong>，而不是零时区——别忘了，英国实行夏时制。因此，为了消除歧义，无论是与他人交谈时还是在计算机世界中，永远不使用 <code class=\"language-text\">格林尼治时间</code> 一词，也不要将时区设置为 <code class=\"language-text\">Etc/Greenwich</code>。将服务器的时区设置为 <code class=\"language-text\">协调世界时</code> 即 <code class=\"language-text\">Etc/Utc</code> 是个好习惯。</p>\n<p>不要忘了将定时器设置为开机自启，并启动之。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl daemon-reload\nsystemctl <span class=\"token builtin class-name\">enable</span> example-task.timer\nsystemctl start example-task.timer</code></pre></div>\n<p>更多的配置选项可参考 systemd 的文档，不再赘述。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#lxc-%E5%AE%B9%E5%99%A8%E6%96%B9%E6%A1%88\">LXC 容器方案</a></p>\n<ul>\n<li><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9-lxc\">为什么选择 LXC？</a></li>\n<li><a href=\"#lxc-%E4%B8%BB%E6%9C%BA%E5%BA%94%E8%AF%A5%E9%80%89%E7%94%A8%E4%BB%80%E4%B9%88%E5%8F%91%E8%A1%8C%E7%89%88\">LXC 主机应该选用什么发行版？</a></li>\n<li><a href=\"#lxc-%E5%AE%B9%E5%99%A8%E5%BA%94%E8%AF%A5%E9%80%89%E7%94%A8%E4%BB%80%E4%B9%88%E5%8F%91%E8%A1%8C%E7%89%88\">LXC 容器应该选用什么发行版？</a></li>\n<li><a href=\"#lxc-%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%BB%E8%A6%81%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B\">LXC 主机的主要配置过程</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%95%9C%E5%83%8F%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88\">镜像同步方案</a></p>\n<ul>\n<li><a href=\"#%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9\">工具选择</a></li>\n<li><a href=\"#%E5%8E%9F%E5%AD%90%E6%80%A7\">原子性</a></li>\n<li><a href=\"#%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7\">保证原子性</a></li>\n<li><a href=\"#systemd-%E7%9A%84-service-%E5%92%8C-timer\">systemd 的 service 和 timer</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"镜像站后端配置记录","date":"May 08, 2019","description":"","tags":["本站发展"]}},"previous":{"fields":{"slug":"/guide/TurnOffRebindProtection/"},"frontmatter":{"title":"校内用户必看：路由器关闭 Rebind Protection"}},"next":{"fields":{"slug":"/guide/Debian/"},"frontmatter":{"title":"Debian 镜像源使用说明"}}},"pageContext":{"id":"9266905e-fb8f-5f2a-8fc9-30cbfc90ffde","previousPostId":"334c07d3-086c-5862-8ce2-03b1063e2233","nextPostId":"7fd1be2b-0dab-5e4e-a169-1f6030445378"}},
    "staticQueryHashes": []}